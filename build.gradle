buildscript {
  ext.kotlinVersion = '1.2.60'
  ext.androidGradlePluginVersion = '3.1.2'

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath 'com.gradle.publish:plugin-publish-plugin:0.10.0'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
    classpath 'com.vanniktech:gradle-code-quality-tools-plugin:0.12.0'
    classpath 'com.vanniktech:gradle-android-junit-jacoco-plugin:0.12.0'
    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.5.0'
  }
}

apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.vanniktech.code.quality.tools'
apply plugin: 'com.vanniktech.android.junit.jacoco'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: "com.vanniktech.maven.publish"

// Workaround for having both Groovy + Kotlin.
compileGroovy {
  dependsOn tasks.getByPath('compileKotlin')
  classpath += files(compileKotlin.destinationDir)
}

codeQualityTools {
  ktlint {
    toolVersion = '0.27.0'
  }
  detekt {
    toolVersion = '1.0.0.RC8'
  }
  findbugs {
    enabled = false
  }
  pmd {
    enabled = false
  }
  checkstyle {
    enabled = false
  }
  cpd {
    enabled = false
  }
  errorProne {
    enabled = false
  }
}

gradlePlugin {
  plugins {
    codeQualityToolsPlugin {
      id = 'com.vanniktech.code.quality.tools'
      implementationClass = 'com.vanniktech.code.quality.tools.CodeQualityToolsPlugin'
    }
  }
}

repositories {
  mavenCentral()
  google()
  gradlePluginPortal()
}

configurations {
  fixtureClasspath
}

// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
// and de-duplication semantics.
def metadata = tasks.getByName('pluginUnderTestMetadata')
metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath)

dependencies {
  api gradleApi()
  api localGroovy()
  api 'de.aaschmid:gradle-cpd-plugin:1.1'
  api 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.14'

  compileOnly "com.android.tools.build:gradle:$androidGradlePluginVersion"

  testImplementation "com.android.tools.build:gradle:$androidGradlePluginVersion"
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.assertj:assertj-core:3.10.0'
  testImplementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

  fixtureClasspath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  fixtureClasspath "com.android.tools.build:gradle:$androidGradlePluginVersion"
}

sourceCompatibility = JavaVersion.VERSION_1_7

pluginBundle {
  website = POM_URL
  vcsUrl = POM_SCM_URL

  plugins {
    codeQualityTools {
      id = 'com.vanniktech.code.quality.tools'
      displayName = POM_NAME
      tags = ['gradle', 'android', 'java', 'findbugs', 'pmd', 'cpd', 'detekt', 'kotlin', 'ktlint', 'checkstyle', 'errorprone', 'multiprojects', 'app module', 'library module', 'lint']
      description = POM_DESCRIPTION
    }
  }
}

wrapper {
  gradleVersion = '4.9'
  distributionType = Wrapper.DistributionType.ALL
}
